= TicketMonster とは?
:Author: Marius Bogoevici

TicketMonster とは Java EE6 に焦点を当てたサンプルです。
利用している Java EE6 のテクノロジは JSF 2,、JPA 2、 CDI や JAX-RS であり、HTML5、jQuery Mobile、JSF や GWT と協調して動作します。
比較的複雑なアプリケーションであり、モバイル・デスクトップそれぞれに対応したモダンなウェブアプリケーションのビルド方法を示します。
TicketMonster はオンラインチケット販売サイトです。各種イベント(コンサートやショウ等)の情報取得及び、チケット予約が行えます。

デモ以外にも、TicketMonster はあなたがアプリケーションを作成する第一歩として利用できる、既存のアプリケーション構造を提供します。
あなた自身のユースケースに適用したり、アイデアを試してみたり、または改良点をコミュニティに還元することもできます。

image::../gfx/octocat_social.png[]

link:http://github.com/jboss-jdf/ticket-monster[Fork us on GitHub!]

このチュートリアルでは TicketMonster をビルドするために必要な様々なツールやテクノロジを体験できます。
または TicketMonster を完全なアプリケーションとしてダウンロードし、お好みの IDE にインポートすることも出来ます。

コードについて詳細を探る前に、このアプリケーションの要件について確認しましょう。

=== ユースケース

現在のユースケースにおいては、大きくわけて2つのカテゴリにまとめています。エンドユーザ指向と管理です。

==== エンドユーザができること

このアプリケーションのエンドユーザは素晴らしいイベントに行きたいと考えています。
エンドユーザはショウを見つけ、チケットの予約やキャンセルをします。
ユースケースは以下のようになります。

* 現在のイベントの検索
* 開催場所の検索
* ショウ(特定の開催場所で開かれるイベント)とその公演時間の選択
* チケットの予約
* 現在の予約状況の確認
* チケット予約のキャンセル

[[end-user-use-cases-image]]
.エンドユーザのユースケース
image::../gfx/ticket-monster-user-use-cases.png[]


==== 管理者ができること

管理者はビジネスの運用に関心があります。
管理者は場所やイベント、ショウといった_マスタデータ_を管理し、さらに、チケットの売れ行きを確認したいと思うでしょう。
ユースケースは以下のようになります。

* イベントの追加・削除・更新
* 場所(客席レイアウト含む)の追加・削除・更新
* 公演の追加・削除・更新
* チケット販売状況のモニタリング

[[administration-use-cases-image]]
.管理者のユースケース
image::../gfx/ticket-monster-administration-use-cases.png[]

=== アーキテクチャ

[[architecture-image]]
.TicketMonster のアーキテクチャ
image::../gfx/ticket-monster-architecture.png[]

このアプリケーションはビジネスロジックや永続化を提供するために、
CDI ・EJB3.1・JAX-RS・JPA 2 といった Java EE 6 のサービスを利用しています。
これらのサービスは、ユーザが直接触触れる予約プロセスにおける
HTML5 や JavaScript(jQuery Mobile によるモバイルデバイスのサポート含む)の裏側で動作します。

管理者サイトでは CRUD 処理を中心としているため、
全ての処理を記述する代りに Forge を使ってビジネスレイヤや UI を自動生成しています。
Forge では EJB3.1・CDI ・JSF を使っており、UX の向上のために Richfaces UI コンポーネントも利用しています。

販売状況のモニタリングでは最新情報をサーバから取得し続ける必要がありますので、
この部分については GWT で開発され、 CDI のクライアント-サーバ間のイベント通知を通して
リアルタイム更新を行うための Errai サポートを紹介します。

===  実行方法

TicketMonster のビルド・実行を行う前に、Forge で管理者サイトを作成する必要があります。
詳細はlink:http://www.jboss.org/jdf/examples/ticket-monster/tutorial/AdminJSF[チュートリアル]を参照してください。

====   TicketMonster のビルド

TicketMonster は 下記の Maven コマンドを実行することでビルドできます。

    mvn clean package

ビルドの一部として Arquillian テストを実行したい場合は、2つの Arquillian プロファイルのうち1つを有効化できます。

テストを実行するにあたり、すでにアプリケーションサーバが起動しているのであれば、`arq-jbossas-remote` プロファイルを利用してください。

    mvn clean package -Parq-jbossas-remote

テストランナーからアプリケーションサーバを起動させたいのであれば、`arq-jbossas-managed` プロファイルを利用してください。
この場合、環境変数 `JBOSS_HOME` に適切なサーバのパスを指定するか、`src/main/test/resources/arquillian.xml` の該当箇所を設定する必要があります。

    mvn clean package -Parq-jbossas-managed

link:http://openshift.com[OpenShift] 環境にデプロイしたい場合は、`postgresql-openshift` プロファイルを利用してください。

    mvn clean package -Ppostgresql-openshift

==== TicketMonster の実行

ローカルまたは OpenShift 環境の JBoss AS7 インスタンス上で TicketMonster を実行できます。

===== ローカル環境での TicketMonster の実行

まず JBoss Enterprise Application Platform 6 か、 JBoss AS 7 を Web プロファイルで起動してください。

1. コマンドラインを開き、JBoss サーバのルートディレクトリに移動してください。
2. 以下のコマンドを実行して Web プロファイルとしてサーバを起動してください。

        Linux の場合:   JBOSS_HOME/bin/standalone.sh
        Windows の場合: JBOSS_HOME\bin\standalone.bat

次に、TicketMonster をデプロイします。

1. 上で示した通り、JBoss サーバが起動している事を確認してください。
2. ビルド及び起動中のサーバインスタンスへのデプロイのために、以下のコマンドを実行してください。

        mvn clean package jboss-as:deploy

        (arq-jbossas-remote プロファイルを利用して、同時にテストを行う事もできます)

3. `target/ticket-monster.war` が起動中のサーバインスタンスにデプロイされます。
4. アプリケーションが実行されているか、http://localhost:8080/ticket-monster にアクセスして確認してください。

===== OpenShift 環境での TicketMonster の実行

まず、OpenShift プロジェクトを作成します。

1. OpenShift のドメインを持っていることと、`jbossas-7` カートリッジを利用してアプリケーションを作成していることを確認してください。詳細は OpenShift の link:https://openshift.redhat.com/app/getting_started[get started] を参照してください。PostgreSQL を利用したい場合は、`postgresql-8.4` カートリッジも追加してください。
2. プロジェクトの Git リポジトリがチェックアウトされている事を確認してください。

次に、ビルドとデプロイを行います。

1. ビルドには下記プロファイルのどちらかを利用できます。
    * default プロファイル(H2 データベースを利用)
    
        mvn clean package	
    
	* `postgresql-openshift` プロファイル(PostgreSQL データベースを利用) ※ PostgreSQL カートリッジが OpenShift 上で有効になっている場合
            
        mvn clean package -Ppostgresql-openshift
			
2. `target/ticket-monster.war` を OpenShift の Git リポジトリ(`<root-of-openshift-application-git-repository>`)にコピーします。

	    cp target/ticket-monster.war <root-of-openshift-application-git-repository>/deployments/ROOT.war

3. `<root-of-openshift-application-git-repository>` フォルダに移動します。

4. 既存の `src` フォルダと `pom.xml` を削除します。

        git rm -r src
        git rm pom.xml

5. リポジトリへファイルを追加・コミットし、OpenShfit へプッシュします。
        
		git add deployments/ROOT.war
		git commit -m "Deploy TicketMonster"
		git push
		
6. `http://<app-name>-<domain-name>.rhcloud.com` にアクセスし、アプリケーションが実行されている事を確認してください。

=== さらに詳しく

この例では、TicketMonster の作成の過程を一連のチュートリアルを通して示しています。

このシリーズでは以下の事を学ぶことができます:

* プロジェクトのセットアップ
* 永続化レイヤの定義
* ビジネスレイヤの設計と実装、RESTful エンドポイントを通してのフロントエンドへの公開
* HTML5・JSON・JavaScript・JQuery Mobile を利用してのフロントエンドのモバイル対応実装
* JSF と JBoss Forge を利用した、 JSF ベースの管理インターフェースの迅速な開発
* JUnit と Arquillian によるプロジェクトを通したテスト

このシリーズの至る所で、JBoss Developer Studio での実施方法が掲載されています。
